schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PictureRequest {
  id: ID!
  address: Bytes!
  title: String!
  description: String!
  imageId: String!
  budget: BigInt!
  creator: Bytes!
  createdAt: BigInt!
  expiresAt: BigInt!
  comments(skip: Int = 0, first: Int = 100, orderBy: RequestComment_orderBy, orderDirection: OrderDirection, where: RequestComment_filter): [RequestComment!]!
  submissions(skip: Int = 0, first: Int = 100, orderBy: RequestSubmission_orderBy, orderDirection: OrderDirection, where: RequestSubmission_filter): [RequestSubmission!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input PictureRequest_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  title: String
  title_not: String
  title_gt: String
  title_lt: String
  title_gte: String
  title_lte: String
  title_in: [String!]
  title_not_in: [String!]
  title_contains: String
  title_contains_nocase: String
  title_not_contains: String
  title_not_contains_nocase: String
  title_starts_with: String
  title_starts_with_nocase: String
  title_not_starts_with: String
  title_not_starts_with_nocase: String
  title_ends_with: String
  title_ends_with_nocase: String
  title_not_ends_with: String
  title_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  imageId: String
  imageId_not: String
  imageId_gt: String
  imageId_lt: String
  imageId_gte: String
  imageId_lte: String
  imageId_in: [String!]
  imageId_not_in: [String!]
  imageId_contains: String
  imageId_contains_nocase: String
  imageId_not_contains: String
  imageId_not_contains_nocase: String
  imageId_starts_with: String
  imageId_starts_with_nocase: String
  imageId_not_starts_with: String
  imageId_not_starts_with_nocase: String
  imageId_ends_with: String
  imageId_ends_with_nocase: String
  imageId_not_ends_with: String
  imageId_not_ends_with_nocase: String
  budget: BigInt
  budget_not: BigInt
  budget_gt: BigInt
  budget_lt: BigInt
  budget_gte: BigInt
  budget_lte: BigInt
  budget_in: [BigInt!]
  budget_not_in: [BigInt!]
  creator: Bytes
  creator_not: Bytes
  creator_gt: Bytes
  creator_lt: Bytes
  creator_gte: Bytes
  creator_lte: Bytes
  creator_in: [Bytes!]
  creator_not_in: [Bytes!]
  creator_contains: Bytes
  creator_not_contains: Bytes
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  expiresAt: BigInt
  expiresAt_not: BigInt
  expiresAt_gt: BigInt
  expiresAt_lt: BigInt
  expiresAt_gte: BigInt
  expiresAt_lte: BigInt
  expiresAt_in: [BigInt!]
  expiresAt_not_in: [BigInt!]
  comments_: RequestComment_filter
  submissions_: RequestSubmission_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PictureRequest_filter]
  or: [PictureRequest_filter]
}

enum PictureRequest_orderBy {
  id
  address
  title
  description
  imageId
  budget
  creator
  createdAt
  expiresAt
  comments
  submissions
  blockNumber
  blockTimestamp
  transactionHash
}

type Query {
  pictureRequest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PictureRequest
  pictureRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: PictureRequest_orderBy
    orderDirection: OrderDirection
    where: PictureRequest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PictureRequest!]!
  requestComment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RequestComment
  requestComments(
    skip: Int = 0
    first: Int = 100
    orderBy: RequestComment_orderBy
    orderDirection: OrderDirection
    where: RequestComment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RequestComment!]!
  requestSubmission(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RequestSubmission
  requestSubmissions(
    skip: Int = 0
    first: Int = 100
    orderBy: RequestSubmission_orderBy
    orderDirection: OrderDirection
    where: RequestSubmission_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RequestSubmission!]!
  submissionPurchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubmissionPurchase
  submissionPurchases(
    skip: Int = 0
    first: Int = 100
    orderBy: SubmissionPurchase_orderBy
    orderDirection: OrderDirection
    where: SubmissionPurchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubmissionPurchase!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RequestComment {
  id: ID!
  address: Bytes!
  request: PictureRequest!
  commenter: Bytes!
  text: String!
  createdAt: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input RequestComment_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  request: String
  request_not: String
  request_gt: String
  request_lt: String
  request_gte: String
  request_lte: String
  request_in: [String!]
  request_not_in: [String!]
  request_contains: String
  request_contains_nocase: String
  request_not_contains: String
  request_not_contains_nocase: String
  request_starts_with: String
  request_starts_with_nocase: String
  request_not_starts_with: String
  request_not_starts_with_nocase: String
  request_ends_with: String
  request_ends_with_nocase: String
  request_not_ends_with: String
  request_not_ends_with_nocase: String
  request_: PictureRequest_filter
  commenter: Bytes
  commenter_not: Bytes
  commenter_gt: Bytes
  commenter_lt: Bytes
  commenter_gte: Bytes
  commenter_lte: Bytes
  commenter_in: [Bytes!]
  commenter_not_in: [Bytes!]
  commenter_contains: Bytes
  commenter_not_contains: Bytes
  text: String
  text_not: String
  text_gt: String
  text_lt: String
  text_gte: String
  text_lte: String
  text_in: [String!]
  text_not_in: [String!]
  text_contains: String
  text_contains_nocase: String
  text_not_contains: String
  text_not_contains_nocase: String
  text_starts_with: String
  text_starts_with_nocase: String
  text_not_starts_with: String
  text_not_starts_with_nocase: String
  text_ends_with: String
  text_ends_with_nocase: String
  text_not_ends_with: String
  text_not_ends_with_nocase: String
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RequestComment_filter]
  or: [RequestComment_filter]
}

enum RequestComment_orderBy {
  id
  address
  request
  request__id
  request__address
  request__title
  request__description
  request__imageId
  request__budget
  request__creator
  request__createdAt
  request__expiresAt
  request__blockNumber
  request__blockTimestamp
  request__transactionHash
  commenter
  text
  createdAt
  blockNumber
  blockTimestamp
  transactionHash
}

type RequestSubmission {
  id: ID!
  address: Bytes!
  request: PictureRequest!
  submitter: Bytes!
  price: BigInt!
  description: String!
  createdAt: BigInt!
  freeImageId: String!
  encryptedImageId: String!
  watermarkedImageId: String!
  purchases(skip: Int = 0, first: Int = 100, orderBy: SubmissionPurchase_orderBy, orderDirection: OrderDirection, where: SubmissionPurchase_filter): [SubmissionPurchase!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input RequestSubmission_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  address: Bytes
  address_not: Bytes
  address_gt: Bytes
  address_lt: Bytes
  address_gte: Bytes
  address_lte: Bytes
  address_in: [Bytes!]
  address_not_in: [Bytes!]
  address_contains: Bytes
  address_not_contains: Bytes
  request: String
  request_not: String
  request_gt: String
  request_lt: String
  request_gte: String
  request_lte: String
  request_in: [String!]
  request_not_in: [String!]
  request_contains: String
  request_contains_nocase: String
  request_not_contains: String
  request_not_contains_nocase: String
  request_starts_with: String
  request_starts_with_nocase: String
  request_not_starts_with: String
  request_not_starts_with_nocase: String
  request_ends_with: String
  request_ends_with_nocase: String
  request_not_ends_with: String
  request_not_ends_with_nocase: String
  request_: PictureRequest_filter
  submitter: Bytes
  submitter_not: Bytes
  submitter_gt: Bytes
  submitter_lt: Bytes
  submitter_gte: Bytes
  submitter_lte: Bytes
  submitter_in: [Bytes!]
  submitter_not_in: [Bytes!]
  submitter_contains: Bytes
  submitter_not_contains: Bytes
  price: BigInt
  price_not: BigInt
  price_gt: BigInt
  price_lt: BigInt
  price_gte: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  price_not_in: [BigInt!]
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  freeImageId: String
  freeImageId_not: String
  freeImageId_gt: String
  freeImageId_lt: String
  freeImageId_gte: String
  freeImageId_lte: String
  freeImageId_in: [String!]
  freeImageId_not_in: [String!]
  freeImageId_contains: String
  freeImageId_contains_nocase: String
  freeImageId_not_contains: String
  freeImageId_not_contains_nocase: String
  freeImageId_starts_with: String
  freeImageId_starts_with_nocase: String
  freeImageId_not_starts_with: String
  freeImageId_not_starts_with_nocase: String
  freeImageId_ends_with: String
  freeImageId_ends_with_nocase: String
  freeImageId_not_ends_with: String
  freeImageId_not_ends_with_nocase: String
  encryptedImageId: String
  encryptedImageId_not: String
  encryptedImageId_gt: String
  encryptedImageId_lt: String
  encryptedImageId_gte: String
  encryptedImageId_lte: String
  encryptedImageId_in: [String!]
  encryptedImageId_not_in: [String!]
  encryptedImageId_contains: String
  encryptedImageId_contains_nocase: String
  encryptedImageId_not_contains: String
  encryptedImageId_not_contains_nocase: String
  encryptedImageId_starts_with: String
  encryptedImageId_starts_with_nocase: String
  encryptedImageId_not_starts_with: String
  encryptedImageId_not_starts_with_nocase: String
  encryptedImageId_ends_with: String
  encryptedImageId_ends_with_nocase: String
  encryptedImageId_not_ends_with: String
  encryptedImageId_not_ends_with_nocase: String
  watermarkedImageId: String
  watermarkedImageId_not: String
  watermarkedImageId_gt: String
  watermarkedImageId_lt: String
  watermarkedImageId_gte: String
  watermarkedImageId_lte: String
  watermarkedImageId_in: [String!]
  watermarkedImageId_not_in: [String!]
  watermarkedImageId_contains: String
  watermarkedImageId_contains_nocase: String
  watermarkedImageId_not_contains: String
  watermarkedImageId_not_contains_nocase: String
  watermarkedImageId_starts_with: String
  watermarkedImageId_starts_with_nocase: String
  watermarkedImageId_not_starts_with: String
  watermarkedImageId_not_starts_with_nocase: String
  watermarkedImageId_ends_with: String
  watermarkedImageId_ends_with_nocase: String
  watermarkedImageId_not_ends_with: String
  watermarkedImageId_not_ends_with_nocase: String
  purchases_: SubmissionPurchase_filter
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RequestSubmission_filter]
  or: [RequestSubmission_filter]
}

enum RequestSubmission_orderBy {
  id
  address
  request
  request__id
  request__address
  request__title
  request__description
  request__imageId
  request__budget
  request__creator
  request__createdAt
  request__expiresAt
  request__blockNumber
  request__blockTimestamp
  request__transactionHash
  submitter
  price
  description
  createdAt
  freeImageId
  encryptedImageId
  watermarkedImageId
  purchases
  blockNumber
  blockTimestamp
  transactionHash
}

type SubmissionPurchase {
  id: ID!
  submission: RequestSubmission!
  purchaser: Bytes!
  purchaseDate: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input SubmissionPurchase_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  submission: String
  submission_not: String
  submission_gt: String
  submission_lt: String
  submission_gte: String
  submission_lte: String
  submission_in: [String!]
  submission_not_in: [String!]
  submission_contains: String
  submission_contains_nocase: String
  submission_not_contains: String
  submission_not_contains_nocase: String
  submission_starts_with: String
  submission_starts_with_nocase: String
  submission_not_starts_with: String
  submission_not_starts_with_nocase: String
  submission_ends_with: String
  submission_ends_with_nocase: String
  submission_not_ends_with: String
  submission_not_ends_with_nocase: String
  submission_: RequestSubmission_filter
  purchaser: Bytes
  purchaser_not: Bytes
  purchaser_gt: Bytes
  purchaser_lt: Bytes
  purchaser_gte: Bytes
  purchaser_lte: Bytes
  purchaser_in: [Bytes!]
  purchaser_not_in: [Bytes!]
  purchaser_contains: Bytes
  purchaser_not_contains: Bytes
  purchaseDate: BigInt
  purchaseDate_not: BigInt
  purchaseDate_gt: BigInt
  purchaseDate_lt: BigInt
  purchaseDate_gte: BigInt
  purchaseDate_lte: BigInt
  purchaseDate_in: [BigInt!]
  purchaseDate_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SubmissionPurchase_filter]
  or: [SubmissionPurchase_filter]
}

enum SubmissionPurchase_orderBy {
  id
  submission
  submission__id
  submission__address
  submission__submitter
  submission__price
  submission__description
  submission__createdAt
  submission__freeImageId
  submission__encryptedImageId
  submission__watermarkedImageId
  submission__blockNumber
  submission__blockTimestamp
  submission__transactionHash
  purchaser
  purchaseDate
  blockNumber
  blockTimestamp
  transactionHash
}

type Subscription {
  pictureRequest(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PictureRequest
  pictureRequests(
    skip: Int = 0
    first: Int = 100
    orderBy: PictureRequest_orderBy
    orderDirection: OrderDirection
    where: PictureRequest_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PictureRequest!]!
  requestComment(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RequestComment
  requestComments(
    skip: Int = 0
    first: Int = 100
    orderBy: RequestComment_orderBy
    orderDirection: OrderDirection
    where: RequestComment_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RequestComment!]!
  requestSubmission(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RequestSubmission
  requestSubmissions(
    skip: Int = 0
    first: Int = 100
    orderBy: RequestSubmission_orderBy
    orderDirection: OrderDirection
    where: RequestSubmission_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RequestSubmission!]!
  submissionPurchase(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SubmissionPurchase
  submissionPurchases(
    skip: Int = 0
    first: Int = 100
    orderBy: SubmissionPurchase_orderBy
    orderDirection: OrderDirection
    where: SubmissionPurchase_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SubmissionPurchase!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}